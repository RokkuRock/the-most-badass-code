name: "CodeQL Manual Multi-Language"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: '32 3 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp', 'csharp', 'java-kotlin', 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup environments
      - name: Setup .NET (C#)
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Setup Java (Java/Kotlin)
        if: matrix.language == 'java-kotlin'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: manual
          queries: security-extended,security-and-quality

      # ðŸ”§ æ‰‹å‹•å»ºç½®æ­¥é©Ÿï¼šC/C++
      - name: Manual build for C/C++
        if: matrix.language == 'c-cpp'
        shell: bash
        run: |
          echo "Starting manual build for C/C++ analysis..."
          export CFLAGS="-g -O0 -fno-omit-frame-pointer -Wall -Wextra"
          export CXXFLAGS="-g -O0 -fno-omit-frame-pointer -Wall -Wextra"
          mkdir -p build && cd build
          find ../ -type f -name '*.c' | while read -r file; do
            gcc $CFLAGS -c "$file" || echo "Issue compiling $file"
          done
          find ../ -type f -name '*.cpp' | while read -r file; do
            g++ $CXXFLAGS -c "$file" || echo "Issue compiling $file"
          done
          echo "C/C++ manual build completed."

      # ðŸ”§ æ‰‹å‹•å»ºç½®æ­¥é©Ÿï¼šC#
      - name: Manual build for C#
        if: matrix.language == 'csharp'
        shell: bash
        run: |
          echo "Starting manual build for C# analysis..."
          dotnet restore || echo "Issue restoring packages"
          dotnet build --no-restore --configuration Release || echo "Issue building project"
          echo "C# manual build completed."

      # ðŸ”§ æ‰‹å‹•å»ºç½®æ­¥é©Ÿï¼šJava/Kotlin
      - name: Manual build for Java/Kotlin
        if: matrix.language == 'java-kotlin'
        shell: bash
        run: |
          echo "Starting manual build for Java/Kotlin analysis..."
          if [ -f "pom.xml" ]; then
            mvn clean compile -DskipTests || echo "Maven build warnings/errors"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            ./gradlew clean build -x test || echo "Gradle build warnings/errors"
          else
            echo "No Maven or Gradle files detected, compiling Java files directly"
            find . -name '*.java' -exec javac {} \; || echo "Manual Java compilation issues"
          fi
          echo "Java/Kotlin manual build completed."

      # ðŸ”§ æ‰‹å‹•å»ºç½®æ­¥é©Ÿï¼šPython
      - name: Manual setup for Python
        if: matrix.language == 'python'
        shell: bash
        run: |
          echo "Starting manual setup for Python analysis..."
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt || echo "Issue installing requirements"
          fi
          if [ -f "setup.py" ]; then
            pip install -e . || echo "Issue installing package"
          fi
          python -m compileall . || echo "Python compilation issues"
          echo "Python manual setup completed."

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "manual-scan-${{ matrix.language }}"
          upload: "always"
